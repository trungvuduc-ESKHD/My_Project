import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st

# ƒê·∫∑t c·∫•u h√¨nh cho ·ª©ng d·ª•ng Streamlit
st.set_page_config(page_title="Analytics Dashboard", page_icon="üåé", layout="wide")
st.subheader("üìà Analytics Dashboard ")

# T·∫£i d·ªØ li·ªáu t·ª´ file CSV
df = pd.read_csv("equipment_list.csv")

# Danh s√°ch ma_id c·∫ßn s·ª≠ d·ª•ng
ma_id_list = [
    "ICP-MS", "IC-Anion", "INS003", "LC-MSMS-114", "LC-MSMS-105",
    "GC-MSMS-141", "GC-MSMS-109", "GC-MSMS-108", "LC-MSMS-50",
    "GC-MSMS-79", "GC-MSMS-47", "GC-MSMS-131", "HPLC-FLD106",
    "HPLC-FLD99", "HPLC-FLD-IR101", "HPLC-UV103", "GC-FID60",
    "HPLC-UV98", "HPLC-UV100", "GC-FID9", "HPLC-139",
    "MOAH-MOSH-111", "LC-MSMS-119", "IC-5", "GC-MSMS144"
]

# L·ªçc d·ªØ li·ªáu d·ª±a tr√™n danh s√°ch ID
filtered_df = df[df['ID'].isin(ma_id_list)]

# C√°c c·ªôt m·ªõi ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
columns_to_plot = ['Non-schedule time (min)', 'Non Production time (min)', 'Set up & cleaning time', 
                   'DowntimeBreakdown', 'Quality losses (min)', 'Net Prod Time (min)']
devices = filtered_df['ID']
percentages = filtered_df[columns_to_plot]

# C√°c nh√≥m ma_id
ma_groups = {
    "HCMCHEM": {"ICP-MS", "IC-Anion"},
    "HCMPEST": {"INS003", "LC-MSMS-114", "LC-MSMS-105", "GC-MSMS-141", "GC-MSMS-109", "GC-MSMS-108",
                "LC-MSMS-50", "GC-MSMS-79", "GC-MSMS-47", "GC-MSMS-131", "HPLC-FLD106"},
    "HCMMYCO": {"HPLC-FLD99", "HPLC-FLD-IR101", "HPLC-UV103", "GC-FID60", "HPLC-UV98", "HPLC-UV100", "GC-FID9", "HPLC-139"},
    "RD": {"MOAH-MOSH-111", "LC-MSMS-119", "IC-5", "GC-MSMS144"}
}

# Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c c·ªôt trong columns_to_plot th√†nh s·ªë, n·∫øu c·∫ßn
for col in columns_to_plot:
    filtered_df[col] = pd.to_numeric(filtered_df[col], errors='coerce')

# T√≠nh ph·∫ßn trƒÉm cho t·ª´ng gi√° tr·ªã
min_by_month = filtered_df['Calendar time']
percentages = (filtered_df[columns_to_plot].div(min_by_month, axis=0)) * 100

# Ch√∫ th√≠ch m√†u cho t·ª´ng c·ªôt
color_map = {
    'Non-schedule time (min)': 'black',  # Kh√¥ng hi·ªÉn th·ªã s·ªë
    'Set up & cleaning time': 'gray',     # Kh√¥ng hi·ªÉn th·ªã s·ªë
    'Quality losses (min)': 'lightblue',
    'Non Production time (min)': 'orange',
    'DowntimeBreakdown': 'red',           # Kh√¥ng hi·ªÉn th·ªã s·ªë
    'Net Prod Time (min)': 'limegreen'
}

# T·∫°o selectbox ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn nh√≥m ma_id
selected_group = st.selectbox("Ch·ªçn Ph√≤ng Ban", list(ma_groups.keys()))

# L·ªçc c√°c ma_id trong nh√≥m ƒë∆∞·ª£c ch·ªçn
filtered_ma_ids = ma_groups[selected_group]
filtered_data = df[df['ID'].isin(filtered_ma_ids)]

# V·∫Ω bi·ªÉu ƒë·ªì d·∫°ng c·ªôt stacked
plt.figure(figsize=(15, 8))
bottoms = pd.Series([0] * len(devices), dtype='float')  # ƒê·∫£m b·∫£o bottoms l√† s·ªë

for col in columns_to_plot:
    plt.bar(devices, percentages[col], bottom=bottoms, label=col, color=color_map[col], alpha=0.85)
    
    # Th√™m s·ªë ph·∫ßn trƒÉm v√†o t·ª´ng c·ªôt, ngo·∫°i tr·ª´ nh·ªØng c·ªôt kh√¥ng hi·ªÉn th·ªã s·ªë
    if col not in ['Non-schedule time (min)', 'Set up & cleaning time', 'DowntimeBreakdown']:
        for i, value in enumerate(percentages[col]):
            if not pd.isna(value):  # Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
                plt.text(devices.iloc[i], bottoms.iloc[i] + value / 2, f'{value:.1f}%', 
                         ha='center', va='center', fontsize=9, color='white', fontweight='bold')
    
    # C·∫≠p nh·∫≠t bottoms cho v√≤ng l·∫∑p ti·∫øp theo
    bottoms += percentages[col]

# Th√™m ti√™u ƒë·ªÅ v√† ch√∫ th√≠ch
plt.title('Comparison of Time Metrics by Equipment', fontsize=14)
plt.ylabel('Percentage (%)', fontsize=12)
plt.xlabel('Equipment ID', fontsize=12)
plt.xticks(rotation=90)
plt.legend(title="Metrics", bbox_to_anchor=(1.05, 1), loc='upper left')

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
st.pyplot(plt)

# Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu d∆∞·ªõi d·∫°ng ph·∫ßn trƒÉm trong Streamlit m√† kh√¥ng thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
st.subheader("üìä Data Table")
# Chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã ph·∫ßn trƒÉm th√†nh chu·ªói khi hi·ªÉn th·ªã trong b·∫£ng
percentages_display = percentages.applymap(lambda x: f'{x:.1f}%')

# Th√™m c·ªôt ID v√†o b·∫£ng
percentages_display['ID'] = filtered_df['ID']

# Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu ƒë√£ l·ªçc
st.write(f"D·ªØ li·ªáu cho nh√≥m {selected_group}:")
st.dataframe(filtered_data)

# Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu d∆∞·ªõi d·∫°ng ph·∫ßn trƒÉm
st.dataframe(percentages_display, width=1200, height=600)
